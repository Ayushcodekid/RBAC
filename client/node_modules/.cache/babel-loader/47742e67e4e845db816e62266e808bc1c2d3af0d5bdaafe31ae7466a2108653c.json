{"ast":null,"code":"var _jsxFileName = \"C:\\\\RBAC_APP\\\\client\\\\src\\\\Pages\\\\Doc\\\\document.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './document.css';\n// import api from '../../api';\n\n// const Document = () => {\n//     const [files, setFiles] = useState([]);\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\n//     const [selectedProject, setSelectedProject] = useState(null);\n\n//     useEffect(() => {\n//         const storedProject = localStorage.getItem('selectedProject')\n//         if (storedProject) {\n//             setSelectedProject(JSON.parse(storedProject))\n//         }\n//         else {\n//             alert(\"No project selected\")\n//         }\n//     }, []);\n\n//     const handleFileChange = (event) => {\n//         const selectedFiles = Array.from(event.target.files);\n//         setFiles(selectedFiles);\n//     };\n\n//     const handleFileUpload = async (event) => {\n//         event.preventDefault();\n//         if (!selectedProject) {\n//             alert('No project selected');\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append('projectId', selectedProject._id);\n//         files.forEach(file => {\n//             formData.append('files', file);\n//         });\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const response = await api.post('/projects/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                     Authorization: `Bearer ${token}`,\n//                 },\n//             });\n//             console.log('Files uploaded successfully:', response.data);\n//             alert('Files uploaded successfully!');\n//             setFiles([]); // Clear the file input after successful upload\n//         } catch (error) {\n//             console.error('Error uploading files:', error);\n//             alert('Error uploading files. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"folder-box-container\">\n//             <h2>Upload Files</h2>\n//             {selectedProject ? (\n//                 <div className=\"folder-box\">\n//                     <input\n//                         type=\"file\"\n//                         multiple\n//                         onChange={handleFileChange}\n//                         className=\"file-input\"\n//                     />\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\n//                         Upload Files\n//                     </button>\n//                     {files.length > 0 && (\n//                         <div className=\"file-box\">\n//                             <h3>Uploaded Files:</h3>\n//                             <ul>\n//                                 {files.map((file, index) => (\n//                                     <li key={index}>{file.name}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                     )}\n//                 </div>\n//             ) : (\n//                 <p>No project selected</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Document;\n\n// import React, { useState, useEffect } from 'react';\n// import './document.css';\n// import api from '../../api';\n\n// const Document = () => {\n//   const [files, setFiles] = useState([]); // Files selected for upload\n//   const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\n//   const [selectedProject, setSelectedProject] = useState(null);\n\n//   useEffect(() => {\n//     const storedProjectId = localStorage.getItem('selectedProject');\n//     if (storedProjectId) {\n//       setSelectedProject(storedProjectId);\n//       fetchProjectFiles(storedProjectId);\n//     } else {\n//       alert(\"No project selected\");\n//     }\n//   }, []);\n\n//   const fetchProjectFiles = async (projectId) => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       console.log(\"Fetching files for projectId:\", projectId);\n//       const response = await api.get(`/projects/${projectId}/files`, {\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       console.log(\"Response received:\", response.data);\n//       setUploadedFiles(response.data.files); // Assuming response.data.files is an array of file names or paths\n//     } catch (error) {\n//       console.error('Error fetching project files:', error);\n//       alert(\"Error fetching project files\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles(selectedFiles);\n//   };\n\n//   const handleFileUpload = async (event) => {\n//     event.preventDefault();\n\n//     if (!selectedProject) {\n//       alert('No project selected');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     files.forEach(file => {\n//       formData.append('files', file);\n//     });\n//     formData.append('projectId', selectedProject);\n\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await api.post('/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n//       console.log('Files uploaded successfully:', response.data);\n//       fetchProjectFiles(selectedProject);\n//       alert(\"Files uploaded successfully\");\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//       alert(\"Error uploading files\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"folder-box-container\">\n//       <h2>Upload Files</h2>\n//       <div className=\"folder-box\">\n//         <input\n//           type=\"file\"\n//           multiple\n//           onChange={handleFileChange}\n//           className=\"file-input\"\n//         />\n//         <button onClick={handleFileUpload} className=\"upload-button\">\n//           Upload Files\n//         </button>\n//         {uploadedFiles && uploadedFiles.length > 0 && (\n//           <div className=\"file-box\">\n//             <h3>Uploaded Files:</h3>\n//             <ul className='files-list'>\n//               {uploadedFiles.map((fileName, index) => (\n//                 <li className='file-li' key={index}>{fileName}</li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Document;\n\nimport React, { useState, useEffect } from 'react';\nimport './document.css';\nimport api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Document = () => {\n  _s();\n  const [files, setFiles] = useState([]); // Files selected for upload\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  useEffect(() => {\n    const storedProjectId = localStorage.getItem('selectedProject');\n    const token = localStorage.getItem('token');\n    if (storedProjectId && token) {\n      setSelectedProject(storedProjectId);\n\n      // Extract user role from token or a separate API call\n      const decodeToken = JSON.parse(atob(token.split('.')[1]));\n      setUserRole(decodeToken.role); // Assuming the role is stored in the token\n\n      fetchProjectFiles(storedProjectId);\n    } else {\n      alert(\"No project selected\");\n    }\n  }, []);\n  const fetchProjectFiles = async projectId => {\n    try {\n      const token = localStorage.getItem('token');\n      console.log(\"Fetching files for projectId:\", projectId);\n      const response = await api.get(`/projects/${projectId}/files`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log(\"Response received:\", response.data);\n      setUploadedFiles(response.data.files); // Assuming response.data.files is an array of file names or paths\n    } catch (error) {\n      console.error('Error fetching project files:', error);\n      alert(\"Error fetching project files\");\n    }\n  };\n  const handleFileChange = event => {\n    const selectedFiles = Array.from(event.target.files);\n    setFiles(selectedFiles);\n  };\n  const handleFileUpload = async event => {\n    event.preventDefault();\n    if (!selectedProject) {\n      alert('No project selected');\n      return;\n    }\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    formData.append('projectId', selectedProject);\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('Files uploaded successfully:', response.data);\n      fetchProjectFiles(selectedProject);\n      alert(\"Files uploaded successfully\");\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      alert(\"Error uploading files\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-box-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: userRole === 'plumber' ? 'Upload Files' : 'Project Files'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), userRole !== 'architect' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileChange,\n        className: \"file-input\",\n        disabled: userRole === 'architect'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        className: \"upload-button\",\n        disabled: userRole === 'architect',\n        children: \"Upload Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this), uploadedFiles && uploadedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Uploaded Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"files-list\",\n        children: uploadedFiles.map((fileName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"file-li\",\n          children: fileName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n_s(Document, \"r9t0Zf9uFxsM7rowHuekEtDmDF4=\");\n_c = Document;\nexport default Document;\nvar _c;\n$RefreshReg$(_c, \"Document\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","Document","_s","files","setFiles","uploadedFiles","setUploadedFiles","selectedProject","setSelectedProject","userRole","setUserRole","storedProjectId","localStorage","getItem","token","decodeToken","JSON","parse","atob","split","role","fetchProjectFiles","alert","projectId","console","log","response","get","headers","data","error","handleFileChange","event","selectedFiles","Array","from","target","handleFileUpload","preventDefault","formData","FormData","forEach","file","append","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","disabled","onClick","length","map","index","_c","$RefreshReg$"],"sources":["C:/RBAC_APP/client/src/Pages/Doc/document.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './document.css';\r\n// import api from '../../api';\r\n\r\n// const Document = () => {\r\n//     const [files, setFiles] = useState([]);\r\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\r\n//     const [selectedProject, setSelectedProject] = useState(null);\r\n\r\n\r\n//     useEffect(() => {\r\n//         const storedProject = localStorage.getItem('selectedProject')\r\n//         if (storedProject) {\r\n//             setSelectedProject(JSON.parse(storedProject))\r\n//         }\r\n//         else {\r\n//             alert(\"No project selected\")\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleFileChange = (event) => {\r\n//         const selectedFiles = Array.from(event.target.files);\r\n//         setFiles(selectedFiles);\r\n//     };\r\n\r\n//     const handleFileUpload = async (event) => {\r\n//         event.preventDefault();\r\n//         if (!selectedProject) {\r\n//             alert('No project selected');\r\n//             return;\r\n//         }\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('projectId', selectedProject._id);\r\n//         files.forEach(file => {\r\n//             formData.append('files', file);\r\n//         });\r\n\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             const response = await api.post('/projects/upload', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'multipart/form-data',\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 },\r\n//             });\r\n//             console.log('Files uploaded successfully:', response.data);\r\n//             alert('Files uploaded successfully!');\r\n//             setFiles([]); // Clear the file input after successful upload\r\n//         } catch (error) {\r\n//             console.error('Error uploading files:', error);\r\n//             alert('Error uploading files. Please try again.');\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <div className=\"folder-box-container\">\r\n//             <h2>Upload Files</h2>\r\n//             {selectedProject ? (\r\n//                 <div className=\"folder-box\">\r\n//                     <input\r\n//                         type=\"file\"\r\n//                         multiple\r\n//                         onChange={handleFileChange}\r\n//                         className=\"file-input\"\r\n//                     />\r\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\r\n//                         Upload Files\r\n//                     </button>\r\n//                     {files.length > 0 && (\r\n//                         <div className=\"file-box\">\r\n//                             <h3>Uploaded Files:</h3>\r\n//                             <ul>\r\n//                                 {files.map((file, index) => (\r\n//                                     <li key={index}>{file.name}</li>\r\n//                                 ))}\r\n//                             </ul>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             ) : (\r\n//                 <p>No project selected</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Document;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './document.css';\r\n// import api from '../../api';\r\n\r\n// const Document = () => {\r\n//   const [files, setFiles] = useState([]); // Files selected for upload\r\n//   const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\r\n//   const [selectedProject, setSelectedProject] = useState(null);\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const storedProjectId = localStorage.getItem('selectedProject');\r\n//     if (storedProjectId) {\r\n//       setSelectedProject(storedProjectId);\r\n//       fetchProjectFiles(storedProjectId);\r\n//     } else {\r\n//       alert(\"No project selected\");\r\n//     }\r\n//   }, []);\r\n\r\n//   const fetchProjectFiles = async (projectId) => {\r\n//     try {\r\n//       const token = localStorage.getItem('token');\r\n//       console.log(\"Fetching files for projectId:\", projectId);\r\n//       const response = await api.get(`/projects/${projectId}/files`, {\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`\r\n//         }\r\n//       });\r\n\r\n//       console.log(\"Response received:\", response.data);\r\n//       setUploadedFiles(response.data.files); // Assuming response.data.files is an array of file names or paths\r\n//     } catch (error) {\r\n//       console.error('Error fetching project files:', error);\r\n//       alert(\"Error fetching project files\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles(selectedFiles);\r\n//   };\r\n\r\n//   const handleFileUpload = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (!selectedProject) {\r\n//       alert('No project selected');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     files.forEach(file => {\r\n//       formData.append('files', file);\r\n//     });\r\n//     formData.append('projectId', selectedProject);\r\n\r\n//     try {\r\n//       const token = localStorage.getItem('token');\r\n//       const response = await api.post('/upload', formData, {\r\n//         headers: {\r\n//           'Content-Type': 'multipart/form-data',\r\n//           'Authorization': `Bearer ${token}`\r\n//         }\r\n//       });\r\n//       console.log('Files uploaded successfully:', response.data);\r\n//       fetchProjectFiles(selectedProject);\r\n//       alert(\"Files uploaded successfully\");\r\n//     } catch (error) {\r\n//       console.error('Error uploading files:', error);\r\n//       alert(\"Error uploading files\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"folder-box-container\">\r\n//       <h2>Upload Files</h2>\r\n//       <div className=\"folder-box\">\r\n//         <input\r\n//           type=\"file\"\r\n//           multiple\r\n//           onChange={handleFileChange}\r\n//           className=\"file-input\"\r\n//         />\r\n//         <button onClick={handleFileUpload} className=\"upload-button\">\r\n//           Upload Files\r\n//         </button>\r\n//         {uploadedFiles && uploadedFiles.length > 0 && (\r\n//           <div className=\"file-box\">\r\n//             <h3>Uploaded Files:</h3>\r\n//             <ul className='files-list'>\r\n//               {uploadedFiles.map((fileName, index) => (\r\n//                 <li className='file-li' key={index}>{fileName}</li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         )}\r\n       \r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Document;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './document.css';\r\nimport api from '../../api';\r\n\r\nconst Document = () => {\r\n  const [files, setFiles] = useState([]); // Files selected for upload\r\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storedProjectId = localStorage.getItem('selectedProject');\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (storedProjectId && token) {\r\n      setSelectedProject(storedProjectId);\r\n\r\n      // Extract user role from token or a separate API call\r\n      const decodeToken = JSON.parse(atob(token.split('.')[1]));\r\n      setUserRole(decodeToken.role); // Assuming the role is stored in the token\r\n\r\n      fetchProjectFiles(storedProjectId);\r\n    } else {\r\n      alert(\"No project selected\");\r\n    }\r\n  }, []);\r\n\r\n  const fetchProjectFiles = async (projectId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      console.log(\"Fetching files for projectId:\", projectId);\r\n      const response = await api.get(`/projects/${projectId}/files`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      console.log(\"Response received:\", response.data);\r\n      setUploadedFiles(response.data.files); // Assuming response.data.files is an array of file names or paths\r\n    } catch (error) {\r\n      console.error('Error fetching project files:', error);\r\n      alert(\"Error fetching project files\");\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFiles = Array.from(event.target.files);\r\n    setFiles(selectedFiles);\r\n  };\r\n\r\n  const handleFileUpload = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!selectedProject) {\r\n      alert('No project selected');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    files.forEach(file => {\r\n      formData.append('files', file);\r\n    });\r\n    formData.append('projectId', selectedProject);\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await api.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      console.log('Files uploaded successfully:', response.data);\r\n      fetchProjectFiles(selectedProject);\r\n      alert(\"Files uploaded successfully\");\r\n    } catch (error) {\r\n      console.error('Error uploading files:', error);\r\n      alert(\"Error uploading files\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"folder-box-container\">\r\n      <h2>{userRole === 'plumber' ? 'Upload Files' : 'Project Files'}</h2>\r\n      {userRole !== 'architect' && (\r\n        <div className=\"folder-box\">\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            onChange={handleFileChange}\r\n            className=\"file-input\"\r\n            disabled={userRole === 'architect'}\r\n          />\r\n          <button\r\n            onClick={handleFileUpload}\r\n            className=\"upload-button\"\r\n            disabled={userRole === 'architect'}\r\n          >\r\n            Upload Files\r\n          </button>\r\n        </div>\r\n      )}\r\n      {uploadedFiles && uploadedFiles.length > 0 && (\r\n        <div className=\"file-box\">\r\n          <h3>Uploaded Files:</h3>\r\n          <ul className='files-list'>\r\n            {uploadedFiles.map((fileName, index) => (\r\n              <li className='file-li' key={index}>{fileName}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Document;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AA2BA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAmBA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AACvB,OAAOC,GAAG,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}