{"ast":null,"code":"var _jsxFileName = \"C:\\\\RBAC_APP\\\\client\\\\src\\\\Pages\\\\Doc\\\\document.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './document.css';\n// import api from '../../api';\n\n// const Document = () => {\n//     const [files, setFiles] = useState([]);\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\n//     const [selectedProject, setSelectedProject] = useState(null);\n\n//     useEffect(() => {\n//         const storedProject = localStorage.getItem('selectedProject')\n//         if (storedProject) {\n//             setSelectedProject(JSON.parse(storedProject))\n//         }\n//         else {\n//             alert(\"No project selected\")\n//         }\n//     }, []);\n\n//     const handleFileChange = (event) => {\n//         const selectedFiles = Array.from(event.target.files);\n//         setFiles(selectedFiles);\n//     };\n\n//     const handleFileUpload = async (event) => {\n//         event.preventDefault();\n//         if (!selectedProject) {\n//             alert('No project selected');\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append('projectId', selectedProject._id);\n//         files.forEach(file => {\n//             formData.append('files', file);\n//         });\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const response = await api.post('/projects/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                     Authorization: `Bearer ${token}`,\n//                 },\n//             });\n//             console.log('Files uploaded successfully:', response.data);\n//             alert('Files uploaded successfully!');\n//             setFiles([]); // Clear the file input after successful upload\n//         } catch (error) {\n//             console.error('Error uploading files:', error);\n//             alert('Error uploading files. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"folder-box-container\">\n//             <h2>Upload Files</h2>\n//             {selectedProject ? (\n//                 <div className=\"folder-box\">\n//                     <input\n//                         type=\"file\"\n//                         multiple\n//                         onChange={handleFileChange}\n//                         className=\"file-input\"\n//                     />\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\n//                         Upload Files\n//                     </button>\n//                     {files.length > 0 && (\n//                         <div className=\"file-box\">\n//                             <h3>Uploaded Files:</h3>\n//                             <ul>\n//                                 {files.map((file, index) => (\n//                                     <li key={index}>{file.name}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                     )}\n//                 </div>\n//             ) : (\n//                 <p>No project selected</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Document;\n\nimport React, { useState, useEffect } from 'react';\nimport './document.css';\nimport api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Document = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  useEffect(() => {\n    const storedProject = JSON.parse(localStorage.getItem('selectedProject'));\n    console.log('Loaded project from localStorage:', storedProject); // Debug log\n    if (storedProject) {\n      setSelectedProject(storedProject);\n    }\n  }, []);\n  const handleFileChange = event => {\n    const selectedFiles = Array.from(event.target.files);\n    setFiles(selectedFiles);\n  };\n  const handleFileUpload = async event => {\n    event.preventDefault();\n    const storedProject = JSON.parse(localStorage.getItem('selectedProject'));\n    console.log('Stored project:', storedProject); // Debug log\n    if (!storedProject || !storedProject._id) {\n      alert('No project selected');\n      return;\n    }\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    formData.append('projectId', storedProject._id); // Use the stored project ID\n\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('Files uploaded successfully:', response.data);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-box-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileChange,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        className: \"upload-button\",\n        children: \"Upload Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Selected Files:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: file.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(Document, \"mmv0nxVnR3e+GgR1sFpOsdILG8A=\");\n_c = Document;\nexport default Document;\nvar _c;\n$RefreshReg$(_c, \"Document\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","Document","_s","files","setFiles","selectedProject","setSelectedProject","storedProject","JSON","parse","localStorage","getItem","console","log","handleFileChange","event","selectedFiles","Array","from","target","handleFileUpload","preventDefault","_id","alert","formData","FormData","forEach","file","append","token","response","post","headers","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","onClick","length","map","index","name","_c","$RefreshReg$"],"sources":["C:/RBAC_APP/client/src/Pages/Doc/document.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './document.css';\r\n// import api from '../../api';\r\n\r\n// const Document = () => {\r\n//     const [files, setFiles] = useState([]);\r\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\r\n//     const [selectedProject, setSelectedProject] = useState(null);\r\n\r\n\r\n//     useEffect(() => {\r\n//         const storedProject = localStorage.getItem('selectedProject')\r\n//         if (storedProject) {\r\n//             setSelectedProject(JSON.parse(storedProject))\r\n//         }\r\n//         else {\r\n//             alert(\"No project selected\")\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleFileChange = (event) => {\r\n//         const selectedFiles = Array.from(event.target.files);\r\n//         setFiles(selectedFiles);\r\n//     };\r\n\r\n//     const handleFileUpload = async (event) => {\r\n//         event.preventDefault();\r\n//         if (!selectedProject) {\r\n//             alert('No project selected');\r\n//             return;\r\n//         }\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('projectId', selectedProject._id);\r\n//         files.forEach(file => {\r\n//             formData.append('files', file);\r\n//         });\r\n\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             const response = await api.post('/projects/upload', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'multipart/form-data',\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 },\r\n//             });\r\n//             console.log('Files uploaded successfully:', response.data);\r\n//             alert('Files uploaded successfully!');\r\n//             setFiles([]); // Clear the file input after successful upload\r\n//         } catch (error) {\r\n//             console.error('Error uploading files:', error);\r\n//             alert('Error uploading files. Please try again.');\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <div className=\"folder-box-container\">\r\n//             <h2>Upload Files</h2>\r\n//             {selectedProject ? (\r\n//                 <div className=\"folder-box\">\r\n//                     <input\r\n//                         type=\"file\"\r\n//                         multiple\r\n//                         onChange={handleFileChange}\r\n//                         className=\"file-input\"\r\n//                     />\r\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\r\n//                         Upload Files\r\n//                     </button>\r\n//                     {files.length > 0 && (\r\n//                         <div className=\"file-box\">\r\n//                             <h3>Uploaded Files:</h3>\r\n//                             <ul>\r\n//                                 {files.map((file, index) => (\r\n//                                     <li key={index}>{file.name}</li>\r\n//                                 ))}\r\n//                             </ul>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             ) : (\r\n//                 <p>No project selected</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Document;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './document.css';\r\nimport api from '../../api';\r\n\r\nconst Document = () => {\r\n  const [files, setFiles] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storedProject = JSON.parse(localStorage.getItem('selectedProject'));\r\n    console.log('Loaded project from localStorage:', storedProject); // Debug log\r\n    if (storedProject) {\r\n      setSelectedProject(storedProject);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFiles = Array.from(event.target.files);\r\n    setFiles(selectedFiles);\r\n  };\r\n\r\n  const handleFileUpload = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const storedProject = JSON.parse(localStorage.getItem('selectedProject'));\r\n    console.log('Stored project:', storedProject);  // Debug log\r\n    if (!storedProject || !storedProject._id) {\r\n        alert('No project selected');\r\n        return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    files.forEach(file => {\r\n        formData.append('files', file);\r\n    });\r\n    formData.append('projectId', storedProject._id);  // Use the stored project ID\r\n\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await api.post('/upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        console.log('Files uploaded successfully:', response.data);\r\n    } catch (error) {\r\n        console.error('Error uploading files:', error);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"folder-box-container\">\r\n      <h2>Upload Files</h2>\r\n      <div className=\"folder-box\">\r\n        <input\r\n          type=\"file\"\r\n          multiple\r\n          onChange={handleFileChange}\r\n          className=\"file-input\"\r\n        />\r\n        <button onClick={handleFileUpload} className=\"upload-button\">\r\n          Upload Files\r\n        </button>\r\n        {files.length > 0 && (\r\n          <div className=\"file-box\">\r\n            <h3>Selected Files:</h3>\r\n            <ul>\r\n              {files.map((file, index) => (\r\n                <li key={index}>{file.name}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Document;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}