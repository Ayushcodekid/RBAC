{"ast":null,"code":"var _jsxFileName = \"C:\\\\RBAC_APP\\\\client\\\\src\\\\Pages\\\\Doc\\\\document.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './document.css';\n// import api from '../../api';\n\n// const Document = () => {\n//     const [files, setFiles] = useState([]);\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\n//     const [selectedProject, setSelectedProject] = useState(null);\n\n//     useEffect(() => {\n//         const storedProject = localStorage.getItem('selectedProject')\n//         if (storedProject) {\n//             setSelectedProject(JSON.parse(storedProject))\n//         }\n//         else {\n//             alert(\"No project selected\")\n//         }\n//     }, []);\n\n//     const handleFileChange = (event) => {\n//         const selectedFiles = Array.from(event.target.files);\n//         setFiles(selectedFiles);\n//     };\n\n//     const handleFileUpload = async (event) => {\n//         event.preventDefault();\n//         if (!selectedProject) {\n//             alert('No project selected');\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append('projectId', selectedProject._id);\n//         files.forEach(file => {\n//             formData.append('files', file);\n//         });\n\n//         try {\n//             const token = localStorage.getItem('token');\n//             const response = await api.post('/projects/upload', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                     Authorization: `Bearer ${token}`,\n//                 },\n//             });\n//             console.log('Files uploaded successfully:', response.data);\n//             alert('Files uploaded successfully!');\n//             setFiles([]); // Clear the file input after successful upload\n//         } catch (error) {\n//             console.error('Error uploading files:', error);\n//             alert('Error uploading files. Please try again.');\n//         }\n//     };\n\n//     return (\n//         <div className=\"folder-box-container\">\n//             <h2>Upload Files</h2>\n//             {selectedProject ? (\n//                 <div className=\"folder-box\">\n//                     <input\n//                         type=\"file\"\n//                         multiple\n//                         onChange={handleFileChange}\n//                         className=\"file-input\"\n//                     />\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\n//                         Upload Files\n//                     </button>\n//                     {files.length > 0 && (\n//                         <div className=\"file-box\">\n//                             <h3>Uploaded Files:</h3>\n//                             <ul>\n//                                 {files.map((file, index) => (\n//                                     <li key={index}>{file.name}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                     )}\n//                 </div>\n//             ) : (\n//                 <p>No project selected</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default Document;\n\nimport React, { useState, useEffect } from 'react';\nimport './document.css';\nimport api from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Document = () => {\n  _s();\n  const [files, setFiles] = useState([]); // Files selected for upload\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [userRole, setUserRole] = useState(null); // State to store user role\n\n  useEffect(() => {\n    const storedProjectId = localStorage.getItem('selectedProject');\n    if (storedProjectId) {\n      setSelectedProject(storedProjectId);\n      fetchProjectFiles(storedProjectId);\n      fetchUserRole(storedProjectId);\n    } else {\n      alert(\"No project selected\");\n    }\n  }, []);\n  const fetchUserRole = async projectId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.get(`/projects/${projectId}/role`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setUserRole(response.data.role); // Assuming response contains { role: \"civil engineer\" }\n    } catch (error) {\n      console.error('Error fetching user role:', error);\n    }\n  };\n  const fetchProjectFiles = async projectId => {\n    try {\n      const token = localStorage.getItem('token');\n      console.log(\"Fetching files for projectId:\", projectId);\n      const response = await api.get(`/projects/${projectId}/files`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log(\"Response received:\", response.data);\n      // Adjust this line based on your actual response structure\n      setUploadedFiles(response.data.files.map(file => file.path)); // Ensure file.path is used if files are objects\n    } catch (error) {\n      console.error('Error fetching project files:', error);\n      alert(\"Error fetching project files\");\n    }\n  };\n  const handleFileChange = event => {\n    const selectedFiles = Array.from(event.target.files);\n    setFiles(selectedFiles);\n  };\n  const handleFileUpload = async event => {\n    event.preventDefault();\n    if (!selectedProject) {\n      alert('No project selected');\n      return;\n    }\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    formData.append('projectId', selectedProject);\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('Files uploaded successfully:', response.data);\n      fetchProjectFiles(selectedProject);\n      alert(\"Files uploaded successfully\");\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      alert(\"Error uploading files\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-box-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileChange,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        className: \"upload-button\",\n        children: \"Upload Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), uploadedFiles && uploadedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Uploaded Files:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"files-list\",\n          children: uploadedFiles.map((fileName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"file-li\",\n            children: fileName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Document, \"r9t0Zf9uFxsM7rowHuekEtDmDF4=\");\n_c = Document;\nexport default Document;\nvar _c;\n$RefreshReg$(_c, \"Document\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","Document","_s","files","setFiles","uploadedFiles","setUploadedFiles","selectedProject","setSelectedProject","userRole","setUserRole","storedProjectId","localStorage","getItem","fetchProjectFiles","fetchUserRole","alert","projectId","token","response","get","headers","data","role","error","console","log","map","file","path","handleFileChange","event","selectedFiles","Array","from","target","handleFileUpload","preventDefault","formData","FormData","forEach","append","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","onClick","length","index","_c","$RefreshReg$"],"sources":["C:/RBAC_APP/client/src/Pages/Doc/document.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './document.css';\r\n// import api from '../../api';\r\n\r\n// const Document = () => {\r\n//     const [files, setFiles] = useState([]);\r\n//     const [projectId, setProjectId] = useState(''); // This should be set when a project is selected\r\n//     const [selectedProject, setSelectedProject] = useState(null);\r\n\r\n\r\n//     useEffect(() => {\r\n//         const storedProject = localStorage.getItem('selectedProject')\r\n//         if (storedProject) {\r\n//             setSelectedProject(JSON.parse(storedProject))\r\n//         }\r\n//         else {\r\n//             alert(\"No project selected\")\r\n//         }\r\n//     }, []);\r\n\r\n//     const handleFileChange = (event) => {\r\n//         const selectedFiles = Array.from(event.target.files);\r\n//         setFiles(selectedFiles);\r\n//     };\r\n\r\n//     const handleFileUpload = async (event) => {\r\n//         event.preventDefault();\r\n//         if (!selectedProject) {\r\n//             alert('No project selected');\r\n//             return;\r\n//         }\r\n\r\n//         const formData = new FormData();\r\n//         formData.append('projectId', selectedProject._id);\r\n//         files.forEach(file => {\r\n//             formData.append('files', file);\r\n//         });\r\n\r\n//         try {\r\n//             const token = localStorage.getItem('token');\r\n//             const response = await api.post('/projects/upload', formData, {\r\n//                 headers: {\r\n//                     'Content-Type': 'multipart/form-data',\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 },\r\n//             });\r\n//             console.log('Files uploaded successfully:', response.data);\r\n//             alert('Files uploaded successfully!');\r\n//             setFiles([]); // Clear the file input after successful upload\r\n//         } catch (error) {\r\n//             console.error('Error uploading files:', error);\r\n//             alert('Error uploading files. Please try again.');\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <div className=\"folder-box-container\">\r\n//             <h2>Upload Files</h2>\r\n//             {selectedProject ? (\r\n//                 <div className=\"folder-box\">\r\n//                     <input\r\n//                         type=\"file\"\r\n//                         multiple\r\n//                         onChange={handleFileChange}\r\n//                         className=\"file-input\"\r\n//                     />\r\n//                     <button onClick={handleFileUpload} className=\"upload-button\">\r\n//                         Upload Files\r\n//                     </button>\r\n//                     {files.length > 0 && (\r\n//                         <div className=\"file-box\">\r\n//                             <h3>Uploaded Files:</h3>\r\n//                             <ul>\r\n//                                 {files.map((file, index) => (\r\n//                                     <li key={index}>{file.name}</li>\r\n//                                 ))}\r\n//                             </ul>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             ) : (\r\n//                 <p>No project selected</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Document;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './document.css';\r\nimport api from '../../api';\r\n\r\nconst Document = () => {\r\n  const [files, setFiles] = useState([]); // Files selected for upload\r\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Files fetched from the backend\r\n  const [selectedProject, setSelectedProject] = useState(null);\r\n  const [userRole, setUserRole] = useState(null); // State to store user role\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const storedProjectId = localStorage.getItem('selectedProject');\r\n    if (storedProjectId) {\r\n      setSelectedProject(storedProjectId);\r\n      fetchProjectFiles(storedProjectId);\r\n      fetchUserRole(storedProjectId);\r\n    } else {\r\n      alert(\"No project selected\");\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n  const fetchUserRole = async (projectId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await api.get(`/projects/${projectId}/role`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      setUserRole(response.data.role); // Assuming response contains { role: \"civil engineer\" }\r\n    } catch (error) {\r\n      console.error('Error fetching user role:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const fetchProjectFiles = async (projectId) => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        console.log(\"Fetching files for projectId:\", projectId);\r\n        const response = await api.get(`/projects/${projectId}/files`, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        // Adjust this line based on your actual response structure\r\n        setUploadedFiles(response.data.files.map(file => file.path)); // Ensure file.path is used if files are objects\r\n    } catch (error) {\r\n        console.error('Error fetching project files:', error);\r\n        alert(\"Error fetching project files\");\r\n    }\r\n};\r\n\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFiles = Array.from(event.target.files);\r\n    setFiles(selectedFiles);\r\n  };\r\n\r\n  const handleFileUpload = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!selectedProject) {\r\n      alert('No project selected');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    files.forEach(file => {\r\n      formData.append('files', file);\r\n    });\r\n    formData.append('projectId', selectedProject);\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await api.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      console.log('Files uploaded successfully:', response.data);\r\n      fetchProjectFiles(selectedProject);\r\n      alert(\"Files uploaded successfully\");\r\n    } catch (error) {\r\n      console.error('Error uploading files:', error);\r\n      alert(\"Error uploading files\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"folder-box-container\">\r\n      <h2>Upload Files</h2>\r\n      <div className=\"folder-box\">\r\n        <input\r\n          type=\"file\"\r\n          multiple\r\n          onChange={handleFileChange}\r\n          className=\"file-input\"\r\n        />\r\n        <button onClick={handleFileUpload} className=\"upload-button\">\r\n          Upload Files\r\n        </button>\r\n        {uploadedFiles && uploadedFiles.length > 0 && (\r\n          <div className=\"file-box\">\r\n            <h3>Uploaded Files:</h3>\r\n            <ul className='files-list'>\r\n              {uploadedFiles.map((fileName, index) => (\r\n                <li className='file-li' key={index}>{fileName}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Document;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}